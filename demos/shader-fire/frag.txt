#version 120

uniform sampler2D tex_noise;
uniform sampler2D tex_gradient;
uniform sampler2D tex_gradient_color;
uniform sampler2D tex_distortion;
uniform sampler2D tex_color;
uniform float alpha_threshold;
uniform float time;
uniform float speed;

void main (void)
{
  //float wobble = (1.0+sin(time*1.5))*0.5;
  
  vec2 uv = gl_TexCoord[0].xy * vec2(4.0, 1.0);
  
  vec2 uv_noise = uv * 0.3;

  uv_noise.y -= time * speed;

  vec2 uv_grad = uv * vec2(1.0, 1.0);
  
  vec2 uv_distor = uv;
  vec3 tdistortion = texture2D(tex_distortion,uv_distor).rgb * 0.015;

  vec2 uv_noise_distor = vec2(uv_noise.x + tdistortion.g, uv_noise.y + tdistortion.r);  
  vec3 tnoise = texture2D(tex_noise, uv_noise_distor).rgb;
  tnoise *= 1.75;

  
  float tgradient = 1.0-texture2D(tex_gradient,uv_grad).r;

  vec3 tgradientcolor = texture2D(tex_gradient_color,uv_grad).rgb;

  vec3 tcolor = texture2D(tex_color,uv_noise_distor*3.0).rgb * vec3(2.0, 1.6, 1.2);


  float alpha0 = (tnoise.x + tnoise.y + tnoise.z) / 3.0;

  float flamewob = ((1.0 + (sin(time + uv.x*8.0) * cos(time - uv.x*5.0)))*0.5) * 0.30;
  //float flamewob = 0.0;

  float thres = alpha_threshold * tgradient *2.15 + flamewob;

  float alpha = 1.0-smoothstep(thres-0.15, thres+0.3, alpha0);  


  //vec3 color = tgradientcolor * tcolor + (alpha-alpha0);
  //vec3 color = tcolor + tcolor * (alpha0-alpha)*0.65;
  
  vec3 flame = clamp(tnoise * 2.1, 0.0, 1.0) * tgradientcolor; 
  vec3 color = mix(tcolor, flame, (alpha-alpha0)*1.5);

  
  gl_FragColor = vec4(color, alpha);
  
}
